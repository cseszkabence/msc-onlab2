// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCPartPicker.Models;

#nullable disable

namespace PCPartPicker.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__CartItem__3214EC07DE21E7B8");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PCPartPicker.Models.ChipsetType", b =>
                {
                    b.Property<int>("ChipsetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chipset_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChipsetTypeId"));

                    b.Property<string>("Type")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("type");

                    b.HasKey("ChipsetTypeId")
                        .HasName("PK__chipset___8AE4C0E34C588E3B");

                    b.ToTable("chipset_type", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CoolerId")
                        .HasColumnType("int");

                    b.Property<int?>("MemoryId")
                        .HasColumnType("int");

                    b.Property<int?>("MotherboardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PowersupplyId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessorId")
                        .HasColumnType("int");

                    b.Property<int?>("StorageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VideocardId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Configur__3214EC07E9CFA21A");

                    b.HasIndex("CaseId");

                    b.HasIndex("CoolerId");

                    b.HasIndex("MemoryId");

                    b.HasIndex("MotherboardId");

                    b.HasIndex("PowersupplyId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("StorageId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideocardId");

                    b.ToTable("Configuration", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.Cpucooler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("color");

                    b.Property<int?>("ManufacturerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<decimal?>("NoiseLevel")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("noise_level");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<decimal?>("Rpm")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("rpm");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("PK__cpucoole__3CC8340A130CC43A");

                    b.HasIndex("ManufacturerTypeId");

                    b.ToTable("cpucooler", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.FormfactorType", b =>
                {
                    b.Property<int>("FormfactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("formfactor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormfactorId"));

                    b.Property<string>("Type")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("type");

                    b.HasKey("FormfactorId")
                        .HasName("PK__formfact__F8C41484C0183579");

                    b.ToTable("formfactor_type", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.Harddrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Cache")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("cache");

                    b.Property<decimal?>("Capacity")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("capacity");

                    b.Property<int?>("DriveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("drive_type_id");

                    b.Property<string>("Interface")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("interface");

                    b.Property<int?>("ManufacturerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<decimal?>("PricePerGb")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price_per_gb");

                    b.Property<string>("Type")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__harddriv__E6AB2F6BC2E3E7DA");

                    b.HasIndex("DriveTypeId");

                    b.HasIndex("ManufacturerTypeId");

                    b.ToTable("harddrive", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.HarddriveType", b =>
                {
                    b.Property<int>("HarddirveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("harddirve_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HarddirveTypeId"));

                    b.Property<string>("Type")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("type");

                    b.HasKey("HarddirveTypeId")
                        .HasName("PK__harddriv__A4B39B9994C82C0B");

                    b.ToTable("harddrive_type", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.ManufacturerType", b =>
                {
                    b.Property<int>("ManufacturerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerTypeId"));

                    b.Property<string>("Type")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("type");

                    b.HasKey("ManufacturerTypeId")
                        .HasName("PK__manufact__AA802FFD80347698");

                    b.ToTable("manufacturer_type", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.Memory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CasLatency")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("cas_latency");

                    b.Property<string>("Color")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("color");

                    b.Property<decimal?>("FirstWordLatency")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("first_word_latency");

                    b.Property<int?>("ManufacturerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type_id");

                    b.Property<string>("Modules")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("modules");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<decimal?>("PricePerGb")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price_per_gb");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("speed");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__memory__96A0586DF3311CEB");

                    b.HasIndex("ManufacturerTypeId");

                    b.HasIndex("Type");

                    b.ToTable("memory", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.MemoryType", b =>
                {
                    b.Property<int>("MemoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("memory_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemoryTypeId"));

                    b.Property<string>("Type")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("type");

                    b.HasKey("MemoryTypeId")
                        .HasName("PK__memory_t__00D6009C161AE41C");

                    b.ToTable("memory_type", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.Motherboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("color");

                    b.Property<string>("FormFactor")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("form_factor");

                    b.Property<int?>("FormFactoryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("form_factory_type_id");

                    b.Property<int?>("ManufacturerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type_id");

                    b.Property<int?>("MaxMemory")
                        .HasColumnType("int")
                        .HasColumnName("max_memory");

                    b.Property<int?>("MemorySlots")
                        .HasColumnType("int")
                        .HasColumnName("memory_slots");

                    b.Property<int?>("MemoryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("memory_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<string>("Socket")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("socket");

                    b.Property<int?>("SocketTypeId")
                        .HasColumnType("int")
                        .HasColumnName("socket_type_id");

                    b.HasKey("Id")
                        .HasName("PK__motherbo__68B7A0F0D17DF627");

                    b.HasIndex("FormFactoryTypeId");

                    b.HasIndex("ManufacturerTypeId");

                    b.HasIndex("MemoryTypeId");

                    b.HasIndex("SocketTypeId");

                    b.ToTable("motherboard", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAFDCC59907");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PCPartPicker.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("PartTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PartTypeID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderItemId")
                        .HasName("PK__OrderIte__57ED06A12B76AE19");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PCPartPicker.Models.Pccase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("color");

                    b.Property<decimal?>("ExternalVolume")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("external_volume");

                    b.Property<string>("FormFactor")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("form_factor");

                    b.Property<int?>("FormFactorTypeId")
                        .HasColumnType("int")
                        .HasColumnName("form_factor_type_id");

                    b.Property<int?>("Internal35Bays")
                        .HasColumnType("int")
                        .HasColumnName("internal_35_bays");

                    b.Property<int?>("ManufacturerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<string>("SidePanel")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("side_panel");

                    b.HasKey("Id")
                        .HasName("PK__pccase__0E7DBE43A310AF49");

                    b.HasIndex("FormFactorTypeId");

                    b.HasIndex("ManufacturerTypeId");

                    b.ToTable("pccase", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.Powersupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("color");

                    b.Property<string>("Efficiency")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("efficiency");

                    b.Property<int?>("FormFactorId")
                        .HasColumnType("int")
                        .HasColumnName("form_factor_id");

                    b.Property<int?>("ManufacturerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type_id");

                    b.Property<string>("Modular")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("modular");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<string>("Type")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("type");

                    b.Property<decimal?>("Wattage")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("wattage");

                    b.HasKey("Id")
                        .HasName("PK__powersup__C379066FE691A8CD");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("ManufacturerTypeId");

                    b.ToTable("powersupply", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.Processor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BoostClock")
                        .HasColumnType("decimal(18, 1)")
                        .HasColumnName("boost_clock");

                    b.Property<decimal?>("CoreClock")
                        .HasColumnType("decimal(18, 1)")
                        .HasColumnName("core_clock");

                    b.Property<int?>("CoreCount")
                        .HasColumnType("int")
                        .HasColumnName("core_count");

                    b.Property<string>("Graphics")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("graphics");

                    b.Property<int?>("ManufacturerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<int?>("SeriesTypeId")
                        .HasColumnType("int")
                        .HasColumnName("series_type_id");

                    b.Property<bool?>("Smt")
                        .HasColumnType("bit")
                        .HasColumnName("smt");

                    b.Property<int?>("SocketTypeId")
                        .HasColumnType("int")
                        .HasColumnName("socket_type_id");

                    b.Property<int?>("Tdp")
                        .HasColumnType("int")
                        .HasColumnName("tdp");

                    b.HasKey("Id")
                        .HasName("PK__processo__E30F8F2983086545");

                    b.HasIndex("ManufacturerTypeId");

                    b.HasIndex("SeriesTypeId");

                    b.HasIndex("SocketTypeId");

                    b.ToTable("processor", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.SeriesType", b =>
                {
                    b.Property<int>("SeriesTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("series_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesTypeId"));

                    b.Property<string>("Type")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("type");

                    b.HasKey("SeriesTypeId")
                        .HasName("PK__series_t__BE02A4A882ED2B20");

                    b.ToTable("series_type", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.SocketType", b =>
                {
                    b.Property<int>("SocketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("socket_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocketId"));

                    b.Property<string>("Type")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("type");

                    b.HasKey("SocketId")
                        .HasName("PK__socket_t__58609DBFD57F45BC");

                    b.ToTable("socket_type", (string)null);
                });

            modelBuilder.Entity("PCPartPicker.Models.Videocard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoostClock")
                        .HasColumnType("int")
                        .HasColumnName("boost_clock");

                    b.Property<string>("Chipset")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("chipset");

                    b.Property<int?>("ChipsetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("chipset_type_id");

                    b.Property<string>("Color")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("color");

                    b.Property<int?>("CoreClock")
                        .HasColumnType("int")
                        .HasColumnName("core_clock");

                    b.Property<int?>("Length")
                        .HasColumnType("int")
                        .HasColumnName("length");

                    b.Property<int?>("ManufacturerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type_id");

                    b.Property<decimal?>("Memory")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("memory");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<int?>("SeriesTypeId")
                        .HasColumnType("int")
                        .HasColumnName("series_type_id");

                    b.HasKey("Id")
                        .HasName("PK__videocar__8B8C23C4C1B60D4C");

                    b.HasIndex("ChipsetTypeId");

                    b.HasIndex("ManufacturerTypeId");

                    b.HasIndex("SeriesTypeId");

                    b.ToTable("videocard", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PCPartPicker.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PCPartPicker.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCPartPicker.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PCPartPicker.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCPartPicker.Models.CartItem", b =>
                {
                    b.HasOne("PCPartPicker.Models.AppUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCPartPicker.Models.Configuration", b =>
                {
                    b.HasOne("PCPartPicker.Models.Pccase", "Case")
                        .WithMany("Configurations")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK__Configura__CaseI__0E6E26BF");

                    b.HasOne("PCPartPicker.Models.Cpucooler", "Cooler")
                        .WithMany("Configurations")
                        .HasForeignKey("CoolerId")
                        .HasConstraintName("FK__Configura__Coole__10566F31");

                    b.HasOne("PCPartPicker.Models.Memory", "Memory")
                        .WithMany("Configurations")
                        .HasForeignKey("MemoryId")
                        .HasConstraintName("FK__Configura__Memor__0C85DE4D");

                    b.HasOne("PCPartPicker.Models.Motherboard", "Motherboard")
                        .WithMany("Configurations")
                        .HasForeignKey("MotherboardId")
                        .HasConstraintName("FK__Configura__Mothe__09A971A2");

                    b.HasOne("PCPartPicker.Models.Powersupply", "Powersupply")
                        .WithMany("Configurations")
                        .HasForeignKey("PowersupplyId")
                        .HasConstraintName("FK__Configura__Power__0D7A0286");

                    b.HasOne("PCPartPicker.Models.Processor", "Processor")
                        .WithMany("Configurations")
                        .HasForeignKey("ProcessorId")
                        .HasConstraintName("FK__Configura__Proce__0A9D95DB");

                    b.HasOne("PCPartPicker.Models.Harddrive", "Storage")
                        .WithMany("Configurations")
                        .HasForeignKey("StorageId")
                        .HasConstraintName("FK__Configura__Stora__0F624AF8");

                    b.HasOne("PCPartPicker.Models.AppUser", "User")
                        .WithMany("Configurations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Configura__UserI__08B54D69");

                    b.HasOne("PCPartPicker.Models.Videocard", "Videocard")
                        .WithMany("Configurations")
                        .HasForeignKey("VideocardId")
                        .HasConstraintName("FK__Configura__Video__0B91BA14");

                    b.Navigation("Case");

                    b.Navigation("Cooler");

                    b.Navigation("Memory");

                    b.Navigation("Motherboard");

                    b.Navigation("Powersupply");

                    b.Navigation("Processor");

                    b.Navigation("Storage");

                    b.Navigation("User");

                    b.Navigation("Videocard");
                });

            modelBuilder.Entity("PCPartPicker.Models.Cpucooler", b =>
                {
                    b.HasOne("PCPartPicker.Models.ManufacturerType", "ManufacturerType")
                        .WithMany("Cpucoolers")
                        .HasForeignKey("ManufacturerTypeId")
                        .HasConstraintName("FK_cpucooler_manufacturer_type");

                    b.Navigation("ManufacturerType");
                });

            modelBuilder.Entity("PCPartPicker.Models.Harddrive", b =>
                {
                    b.HasOne("PCPartPicker.Models.HarddriveType", "DriveType")
                        .WithMany("Harddrives")
                        .HasForeignKey("DriveTypeId")
                        .HasConstraintName("FK_harddrive_harddrive_type");

                    b.HasOne("PCPartPicker.Models.ManufacturerType", "ManufacturerType")
                        .WithMany("Harddrives")
                        .HasForeignKey("ManufacturerTypeId")
                        .HasConstraintName("FK_harddrive_manufacturer_type");

                    b.Navigation("DriveType");

                    b.Navigation("ManufacturerType");
                });

            modelBuilder.Entity("PCPartPicker.Models.Memory", b =>
                {
                    b.HasOne("PCPartPicker.Models.ManufacturerType", "ManufacturerType")
                        .WithMany("Memories")
                        .HasForeignKey("ManufacturerTypeId")
                        .HasConstraintName("FK_memory_manufacturer_type");

                    b.HasOne("PCPartPicker.Models.MemoryType", "TypeNavigation")
                        .WithMany("Memories")
                        .HasForeignKey("Type")
                        .HasConstraintName("FK_memory_memory_type");

                    b.Navigation("ManufacturerType");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("PCPartPicker.Models.Motherboard", b =>
                {
                    b.HasOne("PCPartPicker.Models.FormfactorType", "FormFactoryType")
                        .WithMany("Motherboards")
                        .HasForeignKey("FormFactoryTypeId")
                        .HasConstraintName("FK_motherboard_formfactor_type");

                    b.HasOne("PCPartPicker.Models.ManufacturerType", "ManufacturerType")
                        .WithMany("Motherboards")
                        .HasForeignKey("ManufacturerTypeId")
                        .HasConstraintName("FK_motherboard_manufacturer_type");

                    b.HasOne("PCPartPicker.Models.MemoryType", "MemoryType")
                        .WithMany("Motherboards")
                        .HasForeignKey("MemoryTypeId")
                        .HasConstraintName("FK_motherboard_memory_type");

                    b.HasOne("PCPartPicker.Models.SocketType", "SocketType")
                        .WithMany("Motherboards")
                        .HasForeignKey("SocketTypeId")
                        .HasConstraintName("FK_motherboard_socket_type");

                    b.Navigation("FormFactoryType");

                    b.Navigation("ManufacturerType");

                    b.Navigation("MemoryType");

                    b.Navigation("SocketType");
                });

            modelBuilder.Entity("PCPartPicker.Models.Order", b =>
                {
                    b.HasOne("PCPartPicker.Models.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__UserID__151B244E");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCPartPicker.Models.OrderItem", b =>
                {
                    b.HasOne("PCPartPicker.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderItem__Order__19DFD96B");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PCPartPicker.Models.Pccase", b =>
                {
                    b.HasOne("PCPartPicker.Models.FormfactorType", "FormFactorType")
                        .WithMany("Pccases")
                        .HasForeignKey("FormFactorTypeId")
                        .HasConstraintName("FK_pccase_formfactor_type");

                    b.HasOne("PCPartPicker.Models.ManufacturerType", "ManufacturerType")
                        .WithMany("Pccases")
                        .HasForeignKey("ManufacturerTypeId")
                        .HasConstraintName("FK_pccase_manufacturer_type");

                    b.Navigation("FormFactorType");

                    b.Navigation("ManufacturerType");
                });

            modelBuilder.Entity("PCPartPicker.Models.Powersupply", b =>
                {
                    b.HasOne("PCPartPicker.Models.FormfactorType", "FormFactor")
                        .WithMany("Powersupplies")
                        .HasForeignKey("FormFactorId")
                        .HasConstraintName("FK_powersupply_formfactor_type");

                    b.HasOne("PCPartPicker.Models.ManufacturerType", "ManufacturerType")
                        .WithMany("Powersupplies")
                        .HasForeignKey("ManufacturerTypeId")
                        .HasConstraintName("FK_powersupply_manufacturer_type");

                    b.Navigation("FormFactor");

                    b.Navigation("ManufacturerType");
                });

            modelBuilder.Entity("PCPartPicker.Models.Processor", b =>
                {
                    b.HasOne("PCPartPicker.Models.ManufacturerType", "ManufacturerType")
                        .WithMany("Processors")
                        .HasForeignKey("ManufacturerTypeId")
                        .HasConstraintName("FK_processor_manufacturer_type");

                    b.HasOne("PCPartPicker.Models.SeriesType", "SeriesType")
                        .WithMany("Processors")
                        .HasForeignKey("SeriesTypeId")
                        .HasConstraintName("FK_processor_series_type");

                    b.HasOne("PCPartPicker.Models.SocketType", "SocketType")
                        .WithMany("Processors")
                        .HasForeignKey("SocketTypeId")
                        .HasConstraintName("FK_processor_socket_type");

                    b.Navigation("ManufacturerType");

                    b.Navigation("SeriesType");

                    b.Navigation("SocketType");
                });

            modelBuilder.Entity("PCPartPicker.Models.Videocard", b =>
                {
                    b.HasOne("PCPartPicker.Models.ChipsetType", "ChipsetType")
                        .WithMany("Videocards")
                        .HasForeignKey("ChipsetTypeId")
                        .HasConstraintName("FK_videocard_chipset_type");

                    b.HasOne("PCPartPicker.Models.ManufacturerType", "ManufacturerType")
                        .WithMany("Videocards")
                        .HasForeignKey("ManufacturerTypeId")
                        .HasConstraintName("FK_videocard_manufacturer_type");

                    b.HasOne("PCPartPicker.Models.SeriesType", "SeriesType")
                        .WithMany("Videocards")
                        .HasForeignKey("SeriesTypeId")
                        .HasConstraintName("FK_videocard_series_type");

                    b.Navigation("ChipsetType");

                    b.Navigation("ManufacturerType");

                    b.Navigation("SeriesType");
                });

            modelBuilder.Entity("PCPartPicker.Models.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Configurations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PCPartPicker.Models.ChipsetType", b =>
                {
                    b.Navigation("Videocards");
                });

            modelBuilder.Entity("PCPartPicker.Models.Cpucooler", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("PCPartPicker.Models.FormfactorType", b =>
                {
                    b.Navigation("Motherboards");

                    b.Navigation("Pccases");

                    b.Navigation("Powersupplies");
                });

            modelBuilder.Entity("PCPartPicker.Models.Harddrive", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("PCPartPicker.Models.HarddriveType", b =>
                {
                    b.Navigation("Harddrives");
                });

            modelBuilder.Entity("PCPartPicker.Models.ManufacturerType", b =>
                {
                    b.Navigation("Cpucoolers");

                    b.Navigation("Harddrives");

                    b.Navigation("Memories");

                    b.Navigation("Motherboards");

                    b.Navigation("Pccases");

                    b.Navigation("Powersupplies");

                    b.Navigation("Processors");

                    b.Navigation("Videocards");
                });

            modelBuilder.Entity("PCPartPicker.Models.Memory", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("PCPartPicker.Models.MemoryType", b =>
                {
                    b.Navigation("Memories");

                    b.Navigation("Motherboards");
                });

            modelBuilder.Entity("PCPartPicker.Models.Motherboard", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("PCPartPicker.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PCPartPicker.Models.Pccase", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("PCPartPicker.Models.Powersupply", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("PCPartPicker.Models.Processor", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("PCPartPicker.Models.SeriesType", b =>
                {
                    b.Navigation("Processors");

                    b.Navigation("Videocards");
                });

            modelBuilder.Entity("PCPartPicker.Models.SocketType", b =>
                {
                    b.Navigation("Motherboards");

                    b.Navigation("Processors");
                });

            modelBuilder.Entity("PCPartPicker.Models.Videocard", b =>
                {
                    b.Navigation("Configurations");
                });
#pragma warning restore 612, 618
        }
    }
}
